<?php
// Función que calcula la tasa de interés
function calcularTasaInteres($valorPresente, $cuota, $numeroPeriodos) {
    if ($numeroPeriodos <= 2) {
        if ($numeroPeriodos == 1) {
            $tasa = ($cuota - $valorPresente) / $valorPresente;
            return ['tasa' => $tasa];
        } elseif ($numeroPeriodos == 2) {
            $tasa = 0.01; // Tasa inicial (1%)
            $tolerancia = 0.00001; // Precisión del cálculo
            $maxIteraciones = 1000; // Número máximo de iteraciones

            for ($iter = 0; $iter < $maxIteraciones; $iter++) {
                $tasaDecimal = $tasa;
                
                // Calcular el valor presente usando la tasa actual
                $factor1 = 1 / (1 + $tasaDecimal);
                $factor2 = $factor1 * $factor1;
                $valorCalculado = $cuota * ($factor1 + $factor2);

                // Calcular la diferencia entre el valor calculado y el valor presente
                $diferencia = $valorCalculado - $valorPresente;

                // Calcular la derivada para el método de Newton-Raphson
                $derivada = -$cuota * ($factor1 + 2 * $factor2) / (1 + $tasaDecimal);

                // Ajustar la tasa usando el método de Newton-Raphson
                if ($derivada == 0) {
                    throw new DivisionByZeroError("La derivada es cero, no se puede continuar.");
                }

                $tasaNueva = $tasaDecimal - ($diferencia / $derivada);

                // Verificar la tolerancia
                if (abs($tasaNueva - $tasaDecimal) < $tolerancia) {
                    //return $tasaNueva; // Devolver la tasa en formato decimal
                    return ['tasa' => $tasaNueva];

                }

                $tasa = $tasaNueva;
            }

            throw new Exception("No se pudo encontrar la tasa de interés con la precisión deseada.");
        }
    }

    // Método de Newton-Raphson para más de 2 cuotas
    $tasa = 0.01; // Tasa inicial (1%)
    $tolerancia = 0.00001; // Precisión del cálculo
    $maxIteraciones = 1000; // Número máximo de iteraciones

    for ($iter = 0; $iter < $maxIteraciones; $iter++) {
        $tasaDecimal = $tasa;
        
        // Calcular el valor presente usando la tasa actual
        $factor = pow(1 + $tasaDecimal, -$numeroPeriodos);
        $valorCalculado = ($cuota * (1 - $factor)) / $tasaDecimal;

        // Calcular la diferencia entre el valor calculado y el valor presente
        $diferencia = $valorCalculado - $valorPresente;

        // Calcular la derivada para el método de Newton-Raphson
        $factorDerivada = pow(1 + $tasaDecimal, -$numeroPeriodos);
        $derivada = ($cuota * $factorDerivada * $numeroPeriodos) / $tasaDecimal - ($cuota * (1 - $factorDerivada)) / pow($tasaDecimal, 2);

        // Ajustar la tasa usando el método de Newton-Raphson
        if ($derivada == 0) {
            throw new DivisionByZeroError("La derivada es cero, no se puede continuar.");
        }

        $tasaNueva = $tasaDecimal - ($diferencia / $derivada);

        // Verificar la tolerancia
        if (abs($tasaNueva - $tasaDecimal) < $tolerancia) {
            //return $tasaNueva; // Devolver la tasa en formato decimal
            return ['tasa' => $tasaNueva];

        }

        $tasa = $tasaNueva;
    }

    throw new Exception("No se pudo encontrar la tasa de interés con la precisión deseada.");
}

// Obtener los parámetros enviados a través de la URL
$valorPresente = isset($_GET['valorPresente']) ? $_GET['valorPresente'] : 0;
$cuota = isset($_GET['cuota']) ? $_GET['cuota'] : 0;
$numeroPeriodos = isset($_GET['numeroPeriodos']) ? $_GET['numeroPeriodos'] : 0;

try {
    // Calcular la tasa de interés
    $tasa = calcularTasaInteres($valorPresente, $cuota, $numeroPeriodos);
    
    // Calcular el costo financiero total (CFT)
    $formula = pow(1 + $tasa, 12);
    $formula1 = $formula - 1;
    $cft = $formula1 * 100;

    // Devolver el CFT y la tasa de interés en formato JSON
    echo json_encode(['cft' => $cft, 'tasa' => $tasa]);

} catch (Exception $e) {
    // Devolver un error en formato JSON
    echo json_encode(['error' => $e->getMessage()]);
}
?>